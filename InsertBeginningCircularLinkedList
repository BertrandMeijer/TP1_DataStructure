class Node {
    int data;
    Node next;

    Node(int data)
    {
        this.data = data;
        next = null;
    }
}

class CircularLinkedList {
    Node head;

    // Menyisipkan node baru di depan Circular Linked List
    void insertAtBeginning(int new_data)
    {
        Node new_node = new Node(new_data);
        
        if (head == null) {
            // Jika linked list kosong, buat node baru sebagai head
            head = new_node;
            new_node.next = head;
        } else {
            Node temp = head;
            while (temp.next != head) {
                temp = temp.next;
            }
            new_node.next = head;
            temp.next = new_node;
            head = new_node;
        }
    }

    // Mencetak isi dari Circular Linked List
    void printList()
    {
        if (head != null) {
            Node node = head;
            do {
                System.out.print(node.data + " ");
                node = node.next;
            } while (node != head);
        }
    }
}

public class Main {
    public static void main(String[] args)
    {
        CircularLinkedList circularLinkedList = new CircularLinkedList();

        // Menyisipkan node di awal circular linked list
        circularLinkedList.insertAtBeginning(3);
        circularLinkedList.insertAtBeginning(2);
        circularLinkedList.insertAtBeginning(1);

        System.out.print("Created Circular Linked list is: ");
        circularLinkedList.printList();

        // Menyisipkan data 4 di awal
        circularLinkedList.insertAtBeginning(4);

        System.out.print("\nAfter inserting 4 at the beginning: ");
        circularLinkedList.printList();
    }
}
